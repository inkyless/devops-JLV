name: Lint Code Base

on: 
  push:
    branches:
    - main
  pull_request:
    branches : 
    - main

env:
  DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/jlv-project
  K8S_NAMESPACE: default
  DEPLOYMENT_NAME: test-deployment

jobs:
  build:
    name: Lint Code Base
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: read
      # To report GitHub Actions status checks
      statuses: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Super-linter
        uses: super-linter/super-linter@v7.0.0 # x-release-please-version
        env:
          DEFAULT_BRANCH : main
          VALIDATE_ALL_CODEBASE: true
          VALIDATE_HTML : true
          VALIDATE_JAVASCRIPT_ES	: true
          VALIDATE_PYTHON : true
          # To report GitHub Actions status checks
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-deploy:
    name : Build Docker Image and Deploy to Kubernetes
    runs-on: ubuntu-latest
    permissions:
        contents: read
        packages: read
        # To report GitHub Actions status checks
        statuses: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Docker Login
        uses: docker/login-action@v3
        with:
              username: ${{ secrets.DOCKERHUB_USERNAME }}
              password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Get Short Git SHA
        id: vars
        run: echo "sha=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
      
      - name: Build and push container image
        uses: docker/build-push-action@v6
        with:
                push: true
                tags: |
                  ${{ env.DOCKER_IMAGE }}:${{ env.sha }}
                  ${{ env.DOCKER_IMAGE }}:latest

      - name: Set up Kubernetes
        uses: azure/setup-kubectl@v3
        with:
              version: 'latest'
              
      - name: Deploy to Kubernetes
        run: |
            kubectl set image deployment/${{ env.DEPLOYMENT_NAME }} -n ${{ env.K8S_NAMESPACE }} app=${{ env.DOCKER_IMAGE }}:${{ env.sha }}
            kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME }} -n ${{ env.K8S_NAMESPACE }}
  
      - name: Verify Deployment
        run: |
            kubectl get pods -n ${{ env.K8S_NAMESPACE }}
            kubectl get services -n ${{ env.K8S_NAMESPACE }}
  
      - name: Health Check
        run: |
            kubectl wait --for=condition=ready pod -l app=${{ env.DEPLOYMENT_NAME }} -n ${{ env.K8S_NAMESPACE }} --timeout=480s
            kubectl port-forward service/test-service-cicd 8080:80 -n ${{ env.K8S_NAMESPACE }} &
            curl http://localhost:8080/health

